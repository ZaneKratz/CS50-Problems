#include <cs50.h>
#include <stdio.h>
#include <string.h>

// Max number of candidates
#define MAX 9

// Candidates have name and vote count
typedef struct
{
    string name;
    int votes;
}
candidate;

// Array of candidates
candidate candidates[MAX];

// Number of candidates
int candidate_count;

// Function prototypes
bool vote(string name);
void print_winner(void);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: plurality [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX)
    {
        printf("Maximum number of candidates is %i\n", MAX);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i].name = argv[i + 1];
        candidates[i].votes = 0;
    }

    int voter_count = get_int("Number of voters: ");

    // Loop over all voters
    for (int i = 0; i < voter_count; i++)
    {
        string name = get_string("Vote: ");

        // Check for invalid vote
        if (!vote(name))
        {
            printf("Invalid vote.\n");
        }
    }

    // Display winner of election
    print_winner();
}

// Update vote totals given a new vote
bool vote(string name)
{
    //if name matches a candidates name, update that candidate's vote
    //then return true
    for(int i = 0; i < candidate_count; i++)
    {
        if(!strcmp(candidates[i].name, name))
        {
            candidates[i].votes++;
            return true;
        }
    }
    return false;
}

// Print the winner (or winners) of the election
void print_winner(void)
{
    //print the name of the candidate with the most votes
    //or all candidates who tied
    int winners[] = {};
    int winningvotes = 0;
    int currentwinner;
    int winnercount = 1;

    for(int i = 0; i < candidate_count; i++)
    {
        if(candidates[i].votes > winningvotes)
        {
            winningvotes = candidates[i].votes;
            currentwinner = i;
        }
    }

    winners[0] = currentwinner;

    for(int i2 = 0; i2 < candidate_count; i2++)
    {
        if((i2 != currentwinner) && (candidates[i2].votes == winningvotes))
        {
            winners[winnercount] = i2;
            winnercount++;
        }
    }

    if(winnercount == 1)
    {
        //return winner
        printf("The winner is: %s\n", candidates[winners[0]].name);
    }
    else
    {
        //return list of winners
        printf("The winners are: ");
        for(int i3 = 0; i3 < winnercount; i3++)
        {
            printf("%s", candidates[winners[i3]].name);
            if(i3 < (winnercount - 1))
            {
                printf(", ");
            }
        }
        printf("\n");
    }
    return;
}

